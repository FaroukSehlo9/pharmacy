// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace pharmacy.Models
{
    public partial class pharmacyContext : DbContext
    {
        public pharmacyContext()
        {
        }

        public pharmacyContext(DbContextOptions<pharmacyContext> options)
            : base(options)
        {
        }

        public virtual DbSet<catalog> catalogs { get; set; }
        public virtual DbSet<comment> comments { get; set; }
        public virtual DbSet<medicine> medicines { get; set; }
        public virtual DbSet<order> orders { get; set; }
        public virtual DbSet<user> users { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=DESKTOP-38ELPL0;Initial Catalog=pharmacy;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<comment>(entity =>
            {
                entity.HasOne(d => d.med)
                    .WithMany(p => p.comments)
                    .HasForeignKey(d => d.med_id)
                    .HasConstraintName("FK_comment_medicine");

                entity.HasOne(d => d.user)
                    .WithMany(p => p.comments)
                    .HasForeignKey(d => d.user_id)
                    .HasConstraintName("FK_comment_user");
            });

            modelBuilder.Entity<medicine>(entity =>
            {
                entity.HasOne(d => d.cat)
                    .WithMany(p => p.medicines)
                    .HasForeignKey(d => d.cat_id)
                    .HasConstraintName("FK_medicine_catalog");

                entity.HasOne(d => d.user)
                    .WithMany(p => p.medicines)
                    .HasForeignKey(d => d.user_id)
                    .HasConstraintName("FK_medicine_user");
            });

            modelBuilder.Entity<order>(entity =>
            {
                entity.HasOne(d => d.med)
                    .WithMany(p => p.orders)
                    .HasForeignKey(d => d.med_id)
                    .HasConstraintName("FK_order_medicine");

                entity.HasOne(d => d.user)
                    .WithMany(p => p.orders)
                    .HasForeignKey(d => d.user_id)
                    .HasConstraintName("FK_order_user");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}